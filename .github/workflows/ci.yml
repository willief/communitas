name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-fast:
    name: JS Fast Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PUPPETEER_SKIP_DOWNLOAD: "1"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node deps
        run: npm ci

      - name: Typecheck
        run: npm run typecheck

      - name: Run unit tests (act)
        if: env.ACT == 'true'
        run: npm run test:run

      - name: Run unit tests (full)
        if: env.ACT != 'true'
        run: npm run test:run

  coverage:
    name: JS Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test-fast
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node deps
        run: npm ci

      - name: Run unit tests with coverage
        run: NODE_OPTIONS="--max-old-space-size=8192" npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage

  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust fmt check
        run: cargo fmt --all -- --check

      - name: Rust clippy policy
        run: cargo clippy --workspace --all-features -- -D clippy::panic -D clippy::unwrap_used -D clippy::expect_used

  headless-build:
    name: Headless Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: rust-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: headless-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build headless (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo build --release -p communitas-headless
      - name: Build headless (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cargo build --release -p communitas-headless
      - name: Smoke (Unix)
        if: runner.os != 'Windows'
        run: |
          ./target/release/communitas-headless --help >/dev/null
          ./target/release/communitas-headless --version || true
      - name: Smoke (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ./target/release/communitas-headless.exe --help | Out-Null
          ./target/release/communitas-headless.exe --version
      - name: Show binary info (Unix)
        if: runner.os != 'Windows'
        run: |
          file target/release/communitas-headless || true
      - name: Show binary info (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-Item target/release/communitas-headless.exe | Format-List Length,LastWriteTime

  desktop-build:
    name: Desktop Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: rust-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (GTK/WebKit) [Linux]
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: desktop-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build desktop (Unix)
        if: runner.os != 'Windows'
        run: |
          cargo build --release -p communitas-desktop
      - name: Build desktop (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cargo build --release -p communitas-desktop
      - name: Inspect desktop (Linux)
        if: runner.os == 'Linux'
        run: |
          file target/release/communitas-desktop || true
          ldd target/release/communitas-desktop | grep 'not found' && { echo 'Missing runtime deps'; exit 1; } || true
      - name: Inspect desktop (macOS)
        if: runner.os == 'macOS'
        run: |
          file target/release/communitas-desktop || true
          otool -L target/release/communitas-desktop || true
      - name: Inspect desktop (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-Item target/release/communitas-desktop.exe | Format-List Length,LastWriteTime

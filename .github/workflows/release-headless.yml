name: Release Headless Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false
        default: 'latest'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v$(node -p "require('./package.json').version")"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create release
        if: env.ACT != 'true'
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get-version.outputs.version }}'
            const releaseBody = '## Headless Binaries Release\n\n' +
              '### Available Downloads\n' +
              '- **Linux x86_64**: communitas-headless-x86_64-unknown-linux-gnu.tar.gz\n' +
              '- **macOS Universal**: communitas-headless-macos-universal.tar.gz\n' +
              '- **Windows x86_64**: communitas-headless-windows-x86_64.zip\n\n' +
              '### Binaries Included\n' +
              '- communitas-headless (headless P2P node with built-in auto-update)\n\n' +
              '### Installation\n' +
              'Extract the archive and run the binaries directly. No additional dependencies required.'

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: 'Communitas Headless ' + version,
              body: releaseBody,
              draft: true,
              prerelease: false
            })
            return data.id

  build-linux:
    permissions:
      contents: write
    needs: create-release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            pkg-config

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binaries (headless only)
        run: |
          COMMUNITAS_SKIP_TAURI_BUILD=1 cargo build --release --no-default-features --bin communitas-headless

      - name: Strip binaries
        run: |
          strip target/release/communitas-headless || true

      - name: Create archive (Linux target triple)
        run: |
          cd target/release
          tar -czf communitas-headless-x86_64-unknown-linux-gnu.tar.gz \
            communitas-headless

      - name: Upload to release (Linux)
        if: env.ACT != 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/communitas-headless-x86_64-unknown-linux-gnu.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  build-macos:
    permissions:
      contents: write
    needs: create-release
    runs-on: macos-latest
    # Windows build is flaky due to upstream deps; don't block release on it
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Build x86_64 binaries (headless only)
        run: |
          COMMUNITAS_SKIP_TAURI_BUILD=1 cargo build --release --no-default-features --target x86_64-apple-darwin --bin communitas-headless

      - name: Build aarch64 binaries (headless only)
        run: |
          COMMUNITAS_SKIP_TAURI_BUILD=1 cargo build --release --no-default-features --target aarch64-apple-darwin --bin communitas-headless

      - name: Create universal binaries
        run: |
          cd target
          mkdir -p universal-apple-darwin
          lipo x86_64-apple-darwin/release/communitas-headless aarch64-apple-darwin/release/communitas-headless -create -output universal-apple-darwin/communitas-headless

      - name: Create archive
        run: |
          cd target/universal-apple-darwin
          tar -czf communitas-headless-macos-universal.tar.gz \
            communitas-headless

      - name: Upload to release
        if: env.ACT != 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: target/universal-apple-darwin/communitas-headless-macos-universal.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  build-windows:
    continue-on-error: true
    permissions:
      contents: write
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Build binaries (headless only)
        shell: pwsh
        run: |
          $env:COMMUNITAS_SKIP_TAURI_BUILD = '1'
          cargo build --release --no-default-features --bin communitas-headless

      - name: Create archive
        run: |
          cd target/release
          Compress-Archive -Path communitas-headless.exe -DestinationPath communitas-headless-windows-x86_64.zip

      - name: Upload to release
        if: env.ACT != 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/communitas-headless-windows-x86_64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  publish-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    needs: [create-release, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Publish release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false,
              prerelease: false
            })

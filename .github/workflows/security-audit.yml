name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri -> target
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Install cargo-deny
      run: cargo install cargo-deny
      
    - name: Run cargo audit (security vulnerabilities)
      run: cargo audit --deny warnings
      working-directory: .
      
    - name: Run cargo deny (license and dependency checks)
      run: cargo deny check
      working-directory: .
      
    - name: Check for unwrap/expect in production code
      run: |
        echo "Scanning for unwrap() calls in production code..."
        UNWRAP_COUNT=$(find src-tauri/src -name "*.rs" -not -path "*/tests/*" -not -path "*/__tests__/*" -not -name "*test*.rs" | xargs grep -n "\.unwrap()" | wc -l || echo 0)
        echo "Found $UNWRAP_COUNT unwrap() calls in production code"
        
        echo "Scanning for expect() calls in production code..."
        EXPECT_COUNT=$(find src-tauri/src -name "*.rs" -not -path "*/tests/*" -not -path "*/__tests__/*" -not -name "*test*.rs" | xargs grep -n "\.expect(" | wc -l || echo 0)
        echo "Found $EXPECT_COUNT expect() calls in production code"
        
        echo "Scanning for panic!() calls in production code..."
        PANIC_COUNT=$(find src-tauri/src -name "*.rs" -not -path "*/tests/*" -not -path "*/__tests__/*" -not -name "*test*.rs" | xargs grep -n "panic!(" | wc -l || echo 0)
        echo "Found $PANIC_COUNT panic!() calls in production code"
        
        TOTAL_VIOLATIONS=$((UNWRAP_COUNT + EXPECT_COUNT + PANIC_COUNT))
        
        if [ $TOTAL_VIOLATIONS -gt 0 ]; then
          echo "❌ SECURITY VIOLATION: Found $TOTAL_VIOLATIONS panic-inducing calls in production code"
          echo "Production code must not contain unwrap(), expect(), or panic!() calls"
          echo "Use proper error handling with Result types and the ? operator instead"
          exit 1
        else
          echo "✅ No panic-inducing calls found in production code"
        fi
        
    - name: Scan for hardcoded secrets
      run: |
        echo "Scanning for potential hardcoded secrets..."
        SECRET_PATTERNS=(
          "password.*=.*\".*\""
          "api_key.*=.*\".*\""
          "secret.*=.*\".*\""
          "token.*=.*\".*\""
          "private_key.*=.*\".*\""
          "-----BEGIN.*PRIVATE.*KEY-----"
        )
        
        VIOLATIONS_FOUND=0
        for pattern in "${SECRET_PATTERNS[@]}"; do
          MATCHES=$(find src-tauri/src -name "*.rs" | xargs grep -i "$pattern" | grep -v "test" | grep -v "example" | wc -l || echo 0)
          if [ $MATCHES -gt 0 ]; then
            echo "❌ Found $MATCHES potential hardcoded secrets matching pattern: $pattern"
            VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + MATCHES))
          fi
        done
        
        if [ $VIOLATIONS_FOUND -gt 0 ]; then
          echo "❌ SECURITY VIOLATION: Found $VIOLATIONS_FOUND potential hardcoded secrets"
          echo "Remove all hardcoded credentials from source code"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi
        
    - name: Verify saorsa-fec encryption usage
      run: |
        echo "Verifying all encryption operations use saorsa-fec crate..."
        
        # Check that we're using SecureFecManager for encryption
        FEC_USAGE=$(find src-tauri/src -name "*.rs" | xargs grep -l "SecureFecManager" | wc -l)
        echo "Found $FEC_USAGE files using SecureFecManager"
        
        # Check for any ChaCha20Poly1305 usage outside of secure_fec.rs
        DIRECT_CRYPTO=$(find src-tauri/src -name "*.rs" -not -name "secure_fec.rs" | xargs grep -l "ChaCha20Poly1305" | wc -l || echo 0)
        if [ $DIRECT_CRYPTO -gt 0 ]; then
          echo "❌ Found direct ChaCha20Poly1305 usage outside secure_fec.rs"
          echo "All encryption must go through saorsa-fec crate via SecureFecManager"
          exit 1
        fi
        
        echo "✅ Encryption operations properly use saorsa-fec crate"
        
    - name: Check Rust code formatting
      run: cargo fmt --check
      working-directory: src-tauri
      
    - name: Run Clippy (security lints)
      run: cargo clippy --all-targets --all-features -- -D warnings -D clippy::unwrap_used -D clippy::expect_used -D clippy::panic
      working-directory: src-tauri

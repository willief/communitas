name: Tauri Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Communitas v${process.env.PACKAGE_VERSION}`,
              body: `## What's Changed
              
              ### Features
              - Updated branding to "Privacy, Security and Freedom (Saorsa)"
              - Enhanced network connectivity with offline-first capabilities
              - Improved UI/UX with WhatsApp-style navigation
              
              ### Binaries Available
              - **Desktop Apps**: macOS (DMG), Windows (MSI), Linux (AppImage, DEB)
              - **Headless Node**: communitas-node for server deployments
              - **Bootstrap Node**: For network seed nodes
              - **Auto-updater**: For automatic updates
              
              Full changelog: https://github.com/${{ github.repository }}/compare/v0.1.0...v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  build-headless:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libssl-dev \
            pkg-config

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build headless binaries
        run: |
          cd src-tauri
          cargo build --release --bin communitas-node
          cargo build --release --bin bootstrap
          cargo build --release --bin communitas-autoupdater

      - name: Strip binaries
        run: |
          strip src-tauri/target/release/communitas-node
          strip src-tauri/target/release/bootstrap
          strip src-tauri/target/release/communitas-autoupdater

      - name: Create archives
        run: |
          cd src-tauri/target/release
          # Linux x86_64
          tar -czf communitas-headless-linux-x86_64.tar.gz \
            communitas-node \
            bootstrap \
            communitas-autoupdater
          # Create individual archives too
          tar -czf communitas-node-linux-x86_64.tar.gz communitas-node
          tar -czf bootstrap-linux-x86_64.tar.gz bootstrap
          tar -czf communitas-autoupdater-linux-x86_64.tar.gz communitas-autoupdater

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/release/communitas-headless-linux-x86_64.tar.gz
            src-tauri/target/release/communitas-node-linux-x86_64.tar.gz
            src-tauri/target/release/bootstrap-linux-x86_64.tar.gz
            src-tauri/target/release/communitas-autoupdater-linux-x86_64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-headless-cross-platform:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build headless binaries
        run: |
          cd src-tauri
          cargo build --release --target ${{ matrix.target }} --bin communitas-node
          cargo build --release --target ${{ matrix.target }} --bin bootstrap
          cargo build --release --target ${{ matrix.target }} --bin communitas-autoupdater

      - name: Create archives (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          tar -czf communitas-headless-${{ matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}.tar.gz \
            communitas-node \
            bootstrap \
            communitas-autoupdater

      - name: Create archives (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          Compress-Archive -Path communitas-node.exe,bootstrap.exe,communitas-autoupdater.exe -DestinationPath communitas-headless-windows-${{ matrix.arch }}.zip

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/${{ matrix.target }}/release/communitas-headless-*.tar.gz
            src-tauri/target/${{ matrix.target }}/release/communitas-headless-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    needs: [build-tauri, build-headless, build-headless-cross-platform]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false,
              prerelease: false
            })
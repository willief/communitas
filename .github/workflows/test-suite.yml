name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: . -> target
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libsoup-3.0-dev \
          pkg-config
        sudo apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
          || sudo apt-get install -y libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev
      timeout-minutes: 6
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS dependencies are usually available by default
        echo "macOS dependencies check"
        
    - name: Install cargo-tarpaulin (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cargo-tarpaulin
      
    - name: Run unit tests
      run: cargo test --lib --bins
      
      
    - name: Run integration tests
      run: cargo test --tests
      
      
    - name: Run doctests
      run: cargo test --doc
      
      
    - name: Generate code coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml --output-dir ./coverage/
      
      
    - name: Upload coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: rust-tests
        name: rust-coverage
        
    - name: Verify minimum code coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Extract coverage percentage from tarpaulin output
        COVERAGE=$(cargo tarpaulin --print-summary | grep -oP '\d+\.\d+%' | head -1 | tr -d '%')
        MINIMUM_COVERAGE=80.0
        
        echo "Code coverage: ${COVERAGE}%"
        echo "Minimum required: ${MINIMUM_COVERAGE}%"
        
        if (( $(echo "$COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Code coverage $COVERAGE% is below minimum requirement of $MINIMUM_COVERAGE%"
          exit 1
        else
          echo "✅ Code coverage requirement met"
        fi
      

  tauri-commands-tests:
    name: Tauri Commands Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: . -> target
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libsoup-3.0-dev \
          pkg-config
        sudo apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
          || sudo apt-get install -y libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev
        
    - name: Verify all Tauri commands are tested
      run: |
        echo "Scanning for Tauri command functions..."
        
        # Extract all #[tauri::command] functions
        COMMAND_FUNCTIONS=$(find communitas-desktop/src -name "*.rs" | xargs grep -A 1 "#\[tauri::command\]" | grep "pub async fn\|pub fn" | sed 's/.*fn \([^(]*\).*/\1/' | sort -u)
        
        echo "Found Tauri commands:"
        echo "$COMMAND_FUNCTIONS"
        
        # Check if each command has corresponding tests
        MISSING_TESTS=""
        while IFS= read -r command; do
          if [ -n "$command" ]; then
            TEST_COUNT=$(find . -name "*.rs" -path "*/tests/*" -o -name "*test*.rs" | xargs grep -l "$command" | wc -l || echo 0)
            if [ $TEST_COUNT -eq 0 ]; then
              echo "❌ Missing tests for command: $command"
              MISSING_TESTS="$MISSING_TESTS\n$command"
            else
              echo "✅ Found tests for command: $command"
            fi
          fi
        done <<< "$COMMAND_FUNCTIONS"
        
        if [ -n "$MISSING_TESTS" ]; then
          echo "❌ Some Tauri commands are missing tests"
          echo "Commands without tests:$MISSING_TESTS"
          echo "All Tauri commands must have corresponding test coverage"
          exit 1
        else
          echo "✅ All Tauri commands have test coverage"
        fi

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run typecheck
      
    - name: Run frontend smoke tests
      run: npm run test:run
      
    - name: Generate test coverage
      run: NODE_OPTIONS="--max-old-space-size=10240" npm run test:coverage
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend-tests
        name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: . -> target
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libsoup-3.0-dev \
          pkg-config
        sudo apt-get install -y libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev \
          || sudo apt-get install -y libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      
    - name: Run P2P integration tests
      run: cargo test integration_ --release
      
      
    - name: Run DHT storage integration tests
      run: cargo test integration_dht --release || true
      
      
    - name: Run Reed-Solomon integration tests
      run: cargo test reed_solomon --release || true
      

  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: . -> target
        
    - name: Validate error handling patterns
      run: |
        echo "Validating error handling compliance..."
        
        # Check for proper error handling patterns in src-tauri
        UNWRAP_COUNT=0
        if [ -d "src-tauri/src" ]; then
          COUNT=$(find "src-tauri/src" -name "*.rs" -not -path "*/tests/*" -not -name "*test*.rs" | xargs grep "\.unwrap()" | wc -l || echo 0)
          UNWRAP_COUNT=$((UNWRAP_COUNT + COUNT))
        fi
        
        if [ $UNWRAP_COUNT -gt 0 ]; then
          echo "❌ Found $UNWRAP_COUNT unwrap() calls in production code"
          echo "Production code must use proper error handling with Result types"
          exit 1
        fi
        
        echo "✅ Error handling compliance validated"
        
    - name: Build in release mode (security optimizations)
      run: cargo build --release
      
      
    - name: Verify binary has security features
      run: |
        # Check for stack protection and other security features
        if command -v checksec >/dev/null 2>&1; then
          checksec --file=target/release/communitas-desktop
        else
          echo "checksec not available, skipping binary security analysis"
        fi

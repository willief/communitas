name: Release Binaries (Multi-Platform)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'latest'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          curl \
          wget \
          libssl-dev \
          pkg-config

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: linux-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binaries
      run: |
        cd src-tauri
        cargo build --release --bin communitas-node
        cargo build --release --bin bootstrap

    - name: Strip binaries
      run: |
        strip src-tauri/target/release/communitas-node || true
        strip src-tauri/target/release/bootstrap || true

    - name: Create release archive
      run: |
        cd src-tauri/target/release
        tar -czf communitas-binaries-linux-x86_64.tar.gz \
          communitas-node \
          bootstrap

    - name: Upload Linux binaries
      uses: actions/upload-artifact@v4
      with:
        name: communitas-binaries-linux-x86_64
        path: src-tauri/target/release/communitas-binaries-linux-x86_64.tar.gz

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin,x86_64-apple-darwin

    - name: Build x86_64 binaries
      run: |
        cd src-tauri
        cargo build --release --target x86_64-apple-darwin --bin communitas-node
        cargo build --release --target x86_64-apple-darwin --bin bootstrap

    - name: Build aarch64 binaries
      run: |
        cd src-tauri
        cargo build --release --target aarch64-apple-darwin --bin communitas-node
        cargo build --release --target aarch64-apple-darwin --bin bootstrap

    - name: Create universal binaries
      run: |
        cd src-tauri/target
        mkdir -p release/universal-apple-darwin
        lipo release/x86_64-apple-darwin/release/communitas-node release/aarch64-apple-darwin/release/communitas-node -create -output release/universal-apple-darwin/communitas-node
        lipo release/x86_64-apple-darwin/release/bootstrap release/aarch64-apple-darwin/release/bootstrap -create -output release/universal-apple-darwin/bootstrap

    - name: Create macOS archive
      run: |
        cd src-tauri/target/release/universal-apple-darwin
        tar -czf communitas-binaries-macos-universal.tar.gz \
          communitas-node \
          bootstrap

    - name: Upload macOS binaries
      uses: actions/upload-artifact@v4
      with:
        name: communitas-binaries-macos-universal
        path: src-tauri/target/release/universal-apple-darwin/communitas-binaries-macos-universal.tar.gz

  build-windows:
    name: Build Windows Binaries
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Build binaries
      run: |
        cd src-tauri
        cargo build --release --bin communitas-node
        cargo build --release --bin bootstrap

    - name: Create Windows archive
      run: |
        cd src-tauri/target/release
        Compress-Archive -Path communitas-node.exe,bootstrap.exe -DestinationPath communitas-binaries-windows-x86_64.zip

    - name: Upload Windows binaries
      uses: actions/upload-artifact@v4
      with:
        name: communitas-binaries-windows-x86_64
        path: src-tauri/target/release/communitas-binaries-windows-x86_64.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download Linux binaries
      uses: actions/download-artifact@v4
      with:
        name: communitas-binaries-linux-x86_64

    - name: Download macOS binaries
      uses: actions/download-artifact@v4
      with:
        name: communitas-binaries-macos-universal

    - name: Download Windows binaries
      uses: actions/download-artifact@v4
      with:
        name: communitas-binaries-windows-x86_64

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          communitas-binaries-linux-x86_64.tar.gz
          communitas-binaries-macos-universal.tar.gz
          communitas-binaries-windows-x86_64.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}